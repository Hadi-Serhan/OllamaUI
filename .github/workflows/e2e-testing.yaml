name: E2E Deploy & Test (EC2)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch, tag, or SHA of OllamaUI to build'
        required: false
        default: master

jobs:
  e2e:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ollama
      BROWSERS: "chrome firefox"
      RESOLUTIONS: "1920x1080 1366x768"

    steps:
      - name: Checkout OllamaUI (requested ref or event ref)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Show HEAD and SDK versions (pre-build)
        run: |
          echo "== GITHUB CONTEXT =="
          echo "event: ${{ github.event_name }}"
          echo "ref:   ${{ github.ref }}"
          echo "input ref: ${{ github.event.inputs.ref }}"
          echo "sha:   ${{ github.sha }}"
          echo
          git log --oneline -n 1
          echo
          echo "== package.json versions =="
          node -e "const p=require('./package.json'); console.log('@aws-sdk/client-s3:', p.dependencies?.['@aws-sdk/client-s3']); console.log('@aws-sdk/s3-presigned-post:', p.dependencies?.['@aws-sdk/s3-presigned-post']);"
          echo
          echo "== package-lock.json checks =="
          grep -n '\"@aws-sdk/client-s3\"' package-lock.json || true
          grep -n '\"@aws-sdk/s3-presigned-post\"' package-lock.json || true
          echo
          echo "== smithy entries (sanity) =="
          grep -n '@smithy/eventstream-codec' package-lock.json || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Compute YOLO tag
        run: |
          if [ -n "${{ secrets.YOLO_IMAGE_TAG }}" ]; then
            echo "YOLO_TAG=${{ secrets.YOLO_IMAGE_TAG }}" >> $GITHUB_ENV
          else
            echo "YOLO_TAG=45350350b9dc0211a4edd26738ca664f16066a1b-20250904-095610" >> $GITHUB_ENV
          fi

      - name: Build & push OllamaUI image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Copy docker-compose.yaml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yaml"
          target: "/home/ubuntu/"

      - name: Deploy stack on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 1800s
          command_timeout: 1200s
          debug: true
          script: |
            set -euxo pipefail

            if ! docker compose version >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo systemctl enable --now docker
            fi

            mkdir -p /home/ubuntu/deploy
            cp -f /home/ubuntu/docker-compose.yaml /home/ubuntu/deploy/docker-compose.yaml
            cd /home/ubuntu/deploy

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Compose envs
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_NAMESPACE }}"
            export OLLAMA_UI_IMG_TAG="${{ env.IMAGE_TAG }}"
            export YOLO_IMG_TAG="${{ env.YOLO_TAG }}"
            export POSTGRES_DB="predictions"
            export POSTGRES_USER="postgres"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export YOLO_PORT="8080"
            export OLLAMA_UI_PORT="3000"
            export OLLAMA_URL="${{ secrets.OLLAMA_URL }}"
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export AWS_S3_BUCKET="${{ secrets.S3_BUCKET_NAME }}"

            # Force API to use SQLite (avoids Postgres password issue)
            export DB_BACKEND="sqlite"
            export DATABASE_URL="sqlite:///./predictions.db"

            PROJECT="ollamauistack"
            SUDO_ENV="--preserve-env=DOCKERHUB_USERNAME,OLLAMA_UI_IMG_TAG,YOLO_IMG_TAG,POSTGRES_DB,POSTGRES_USER,POSTGRES_PASSWORD,YOLO_PORT,OLLAMA_UI_PORT,OLLAMA_URL,AWS_REGION,AWS_S3_BUCKET,DB_BACKEND,DATABASE_URL"

            # Ensure legacy bare-metal yolo.service can't bind host :8080 (non-destructive, reversible)
            set +e
            if systemctl list-unit-files | grep -q '^yolo.service'; then
              systemctl is-active --quiet yolo.service && sudo systemctl stop yolo.service
              if [ -e /etc/systemd/system/yolo.service ] && [ ! -L /etc/systemd/system/yolo.service ]; then
                echo "Backing up /etc/systemd/system/yolo.service -> /etc/systemd/system/yolo.service.bak"
                sudo mv /etc/systemd/system/yolo.service /etc/systemd/system/yolo.service.bak
              fi
              sudo systemctl disable yolo.service 2>/dev/null
              sudo systemctl mask yolo.service 2>/dev/null
              sudo systemctl daemon-reload
            fi
            set -e

            echo "== Pre-clean old compose projects =="
            sudo docker compose -p ubuntu down || true
            sudo docker compose -p deploy down || true
            sudo docker compose -p "$PROJECT" down || true

            echo "== Free host ports 3000 and 8080 if anything is using them =="
            for PORT in 3000 8080; do
              IDS=$(sudo docker ps --format '{{.ID}} {{.Ports}}' | awk -v p=":$PORT->" '$0 ~ p {print $1}')
              if [ -n "${IDS}" ]; then
                echo "Stopping Docker container(s) on port ${PORT}: ${IDS}"
                sudo docker stop ${IDS} || true
              fi
            done
            for PORT in 3000 8080; do
              if sudo ss -ltnp "( sport = :${PORT} )" | grep -q LISTEN; then
                echo "Port ${PORT} is still taken by a non-docker process; killing it."
                sudo fuser -k ${PORT}/tcp || true
              fi
            done

            echo "== Deploy new stack =="
            sudo $SUDO_ENV docker compose -p "$PROJECT" --env-file /dev/null pull || true
            sudo $SUDO_ENV docker compose -p "$PROJECT" --env-file /dev/null up -d --remove-orphans

            echo "== Wait for UI =="
            for i in {1..30}; do
              if curl -fsS "http://localhost:${OLLAMA_UI_PORT}" >/dev/null; then
                echo "UI is up"; break
              fi
              echo "Waiting for UI... ($i)"; sleep 5
            done

            echo "--- docker compose ps ---"
            sudo $SUDO_ENV docker compose -p "$PROJECT" --env-file /dev/null ps || true
            echo "--- last 80 lines of logs ---"
            sudo $SUDO_ENV docker compose -p "$PROJECT" --env-file /dev/null logs --no-color --tail=80 ollama-ui api db || true

      - name: Checkout tests (OllamaUITesting)
        uses: actions/checkout@v4
        with:
          repository: Hadi-Serhan/OllamaUITesting
          path: tests
          token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install test deps
        working-directory: tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Chrome (stable)
        id: chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup Firefox (latest)
        id: firefox
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: latest

      - name: Remove preinstalled chromedriver (avoid mismatch)
        run: |
          sudo rm -f /usr/bin/chromedriver || true
          which chromedriver || true

      - name: Run Selenium tests (per browser/resolution) and write Allure env
        working-directory: tests
        env:
          BASE_URL: http://${{ secrets.EC2_HOST }}:3000
          CHROME_BIN: ${{ steps.chrome.outputs.chrome-path }}
          FIREFOX_BIN: ${{ steps.firefox.outputs.firefox-path }}
          OLLAMA_UI_IMAGE: ${{ secrets.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          YOLO_IMAGE: ${{ secrets.DOCKERHUB_NAMESPACE }}/yolo:${{ env.YOLO_TAG }}
          POSTGRES_IMAGE: postgres:15
        run: |
          set -e
          mkdir -p allure-results
          for B in $BROWSERS; do
            for R in $RESOLUTIONS; do
              W="${R%x*}"
              H="${R#*x}"
              OUT="allure-results/${B}-${R//\//x}"
              mkdir -p "$OUT"

              printf '%s\n' \
                "BROWSER=${B}" \
                "RESOLUTION=${W}x${H}" \
                "BASE_URL=${BASE_URL}" \
                "OLLAMA_UI_IMAGE=${OLLAMA_UI_IMAGE}" \
                "YOLO_IMAGE=${YOLO_IMAGE}" \
                "POSTGRES_IMAGE=${POSTGRES_IMAGE}" \
                "AWS_REGION=${{ secrets.AWS_REGION }}" \
                "AWS_S3_BUCKET=${{ secrets.S3_BUCKET_NAME }}" \
                > "$OUT/environment.properties"

              echo "=== Running tests: browser=$B size=${W}x${H} ==="
              BROWSER="$B" \
              SCREEN_WIDTH="$W" \
              SCREEN_HEIGHT="$H" \
              HEADLESS="true" \
              OLLAMA_URL="$BASE_URL" \
              pytest -q --alluredir="$OUT"
            done
          done

          rm -rf allure-results-merged
          mkdir -p allure-results-merged
          find allure-results -type f -name '*.json' -exec cp {} allure-results-merged/ \;
          find allure-results -type f -name '*.txt'  -exec cp {} allure-results-merged/ \;
          find allure-results -type f -name '*.xml'  -exec cp {} allure-results-merged/ \;
          find allure-results -type f -name '*.png'  -exec cp {} allure-results-merged/ \;
          find allure-results -type f -name 'environment.properties' -exec cp {} allure-results-merged/ \;

      - name: Write merged Allure environment + executor
        working-directory: tests
        run: |
          {
            echo "BASE_URL=http://${{ secrets.EC2_HOST }}:3000"
            echo "BROWSERS=${{ env.BROWSERS }}"
            echo "RESOLUTIONS=${{ env.RESOLUTIONS }}"
            echo "CHROME_VERSION=${{ steps.chrome.outputs.chrome-version }}"
            echo "FIREFOX_VERSION=${{ steps.firefox.outputs.firefox-version }}"
            echo "OLLAMA_UI_IMAGE=${{ secrets.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            echo "YOLO_IMAGE=${{ secrets.DOCKERHUB_NAMESPACE }}/yolo:${{ env.YOLO_TAG }}"
            echo "POSTGRES_IMAGE=postgres:15"
            echo "AWS_REGION=${{ secrets.AWS_REGION }}"
            echo "AWS_S3_BUCKET=${{ secrets.S3_BUCKET_NAME }}"
          } > allure-results-merged/environment.properties

          cat > allure-results-merged/executor.json <<'JSON'
          {
            "name": "GitHub Actions",
            "type": "github",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "buildName": "${{ github.workflow }}",
            "buildOrder": "${{ github.run_number }}",
            "reportName": "E2E on EC2"
          }
          JSON

          echo "== merged results =="
          ls -l allure-results-merged/

      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: tests/allure-results-merged

  publish-allure:
    name: Publish Allure to Pages
    needs: e2e
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download allure-results artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: ./allure-results

      - name: Debug env file is here
        run: |
          ls -la ./allure-results
          echo "----- environment.properties -----"
          cat ./allure-results/environment.properties || true

      - name: Generate Allure report
        uses: simple-elf/allure-report-action@v1.8
        with:
          allure_results: ./allure-results
          allure_report:  ./allure-report
          allure_history: ./allure-history

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-history
